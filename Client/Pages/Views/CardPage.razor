@page "/card"
@using BlazorPokemonCardSetViewer.Pages.ViewModels
@inject CardPageViewModel ViewModel
@inject ILogger<CardPage> Logger

<div class="main-container">
    <div class="sidebar">
        <label for="cardId" class="form-label">Card Name:</label>
        <div class="input-group">
            <input id="cardId" class="form-control" @bind="@ViewModel.CardId" placeholder="Enter card name..."/>
            <button class="btn btn-primary" @onclick="LoadCard" disabled="@ViewModel.IsLoading">
                @if (ViewModel.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                else
                {
                    <span>Search Cards</span>
                }
            </button>
        </div>
        <small class="form-text text-muted">Try names like "Pikachu", "Charizard", "Blastoise", etc.</small>
    </div>
    
    <div class="content">
        @if (ViewModel.ErrorMessage != null)
        {
            <div class="alert alert-danger">
                @ViewModel.ErrorMessage
            </div>
        }
        
        @if (ViewModel.Cards.Any())
        {
            <div class="cards-container">
                @foreach (var card in ViewModel.Cards)
                {
                    <div class="card-wrapper">
                        <div class="card">
                            @if (card.Images?.Small != null)
                            {
                                <img src="@card.Images.Small" class="card-img-top" alt="@card.Name" loading="lazy">
                            }
                            <div class="card-body">
                                <h5 class="card-title">@card.Name</h5>
                                <h6 class="card-subtitle mb-2 text-muted">ID: @card.Id</h6>
                                @if (!string.IsNullOrEmpty(card.Hp) && card.Hp != "N/A")
                                {
                                    <h6 class="card-text">HP: @card.Hp</h6>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (!ViewModel.IsLoading)
        {
            <div class="alert alert-info">
                <i class="fas fa-search"></i> Enter a card name to search for Pokemon cards.
            </div>
        }
    </div>
</div>

<style>
    .main-container {
        display: grid;
        gap: 2rem;
        grid-template-columns: repeat(12, 1fr);
        margin: 1rem auto 10rem;
        align-items: start;
    }
    
    .sidebar {
        grid-column: span 3;
        position: sticky;
        top: 1rem;
    }
    
    .content {
        order: 1;
        grid-column: span 9;
        box-sizing: border-box;
    }
    
    .cards-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }
    
    .card-wrapper {
        display: flex;
        justify-content: center;
    }
    
    .card {
        width: 100%;
        max-width: 250px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .card-img-top {
        width: 100%;
        height: auto;
        object-fit: cover;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .card-title {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .card-subtitle {
        font-size: 0.9rem;
        color: #666;
    }
    
    .card-text {
        font-size: 0.9rem;
        margin-bottom: 0.25rem;
    }
    
    /* Responsive design */
    @@media (max-width: 768px) {
        .main-container {
            grid-template-columns: 1fr;
        }
        
        .sidebar {
            grid-column: span 1;
            position: static;
        }
        
        .content {
            grid-column: span 1;
        }
        
        .cards-container {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        }
    }
</style>

@code {
    protected override void OnInitialized()
    {
        Logger.LogInformation("CardPage initialized");
    }
    
    private async Task LoadCard()
    {
        Logger.LogInformation("Load button clicked for card: {CardId}", ViewModel.CardId);
        await ViewModel.LoadCardAsync(ViewModel.CardId);
    }
}