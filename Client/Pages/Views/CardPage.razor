@page "/card"
@using BlazorPokemonCardSetViewer.Pages.ViewModels
@inject CardPageViewModel ViewModel
@inject ILogger<CardPage> Logger

<div class="main-container">
    <div class="sidebar">
        <label for="cardId" class="form-label">Card Name:</label>
        <div class="input-group">
            <input id="cardId" class="form-control" @bind="@ViewModel.SearchTerm" 
                   @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchCards(); })"
                   placeholder="Enter card name..."/>
            <button class="btn btn-primary" @onclick="SearchCards" disabled="@ViewModel.IsLoading">
                @if (ViewModel.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                else
                {
                    <span>Search Cards</span>
                }
            </button>
        </div>
        <small class="form-text text-muted">Try names like "Pikachu", "Charizard", "Blastoise", etc.</small>
        
        @if (ViewModel.PagedCards.TotalCount > 0)
        {
            <div class="mt-3">
                <small class="text-muted">
                    Showing @((ViewModel.CurrentPage - 1) * ViewModel.PageSize + 1) - 
                    @(Math.Min(ViewModel.CurrentPage * ViewModel.PageSize, ViewModel.PagedCards.TotalCount)) 
                    of @ViewModel.PagedCards.TotalCount cards
                </small>
            </div>
        }
    </div>
    
    <div class="content">
        @if (ViewModel.ErrorMessage != null)
        {
            <div class="alert alert-danger">
                @ViewModel.ErrorMessage
            </div>
        }
        
        @if (ViewModel.PagedCards.Data.Any())
        {
            <div class="cards-container">
                @foreach (var card in ViewModel.PagedCards.Data)
                {
                    <div class="card-wrapper">
                        <div class="card">
                            @if (card.Images?.Small != null)
                            {
                                <img src="@card.Images.Small" class="card-img-top" alt="@card.Name" loading="lazy">
                            }
                            <div class="card-body">
                                <h5 class="card-title">@card.Name</h5>
                                <h6 class="card-subtitle mb-2 text-muted">ID: @card.Id</h6>
                                @if (!string.IsNullOrEmpty(card.Hp) && card.Hp != "N/A")
                                {
                                    <h6 class="card-text">HP: @card.Hp</h6>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination Controls -->
            @if (ViewModel.PagedCards.TotalPages > 1)
            {
                <nav aria-label="Card pagination" class="pagination-nav">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(ViewModel.PagedCards.HasPreviousPage ? "" : "disabled")">
                            <button class="page-link" @onclick="ViewModel.PreviousPageAsync" 
                                    disabled="@(!ViewModel.PagedCards.HasPreviousPage || ViewModel.IsLoading)">
                                Previous
                            </button>
                        </li>
                        
                        @for (int i = Math.Max(1, ViewModel.CurrentPage - 2); 
                              i <= Math.Min(ViewModel.PagedCards.TotalPages, ViewModel.CurrentPage + 2); 
                              i++)
                        {
                            var pageNumber = i; // Capture for lambda
                            <li class="page-item @(i == ViewModel.CurrentPage ? "active" : "")">
                                <button class="page-link" @onclick="@(() => ViewModel.GoToPageAsync(pageNumber))"
                                        disabled="@ViewModel.IsLoading">
                                    @i
                                </button>
                            </li>
                        }
                        
                        <li class="page-item @(ViewModel.PagedCards.HasNextPage ? "" : "disabled")">
                            <button class="page-link" @onclick="ViewModel.NextPageAsync" 
                                    disabled="@(!ViewModel.PagedCards.HasNextPage || ViewModel.IsLoading)">
                                Next
                            </button>
                        </li>
                    </ul>
                    
                    <div class="text-center mt-2">
                        <small class="text-muted">
                            Page @ViewModel.CurrentPage of @ViewModel.PagedCards.TotalPages
                        </small>
                    </div>
                </nav>
            }
        }
        else if (!ViewModel.IsLoading && !string.IsNullOrEmpty(ViewModel.SearchTerm))
        {
            <div class="alert alert-info">
                <i class="fas fa-search"></i> No cards found for "@ViewModel.SearchTerm"
            </div>
        }
        else if (!ViewModel.IsLoading)
        {
            <div class="alert alert-info">
                <i class="fas fa-search"></i> Enter a card name to search for Pokemon cards.
            </div>
        }
    </div>
</div>

<style>
    .main-container {
        display: grid;
        gap: 2rem;
        grid-template-columns: repeat(12, 1fr);
        margin: 1rem auto 10rem;
        align-items: start;
    }
    
    .sidebar {
        grid-column: span 3;
        position: sticky;
        top: 1rem;
    }
    
    .content {
        order: 1;
        grid-column: span 9;
        box-sizing: border-box;
    }
    
    .cards-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        margin-top: 1rem;
        margin-bottom: 2rem;
    }
    
    .card-wrapper {
        display: flex;
        justify-content: center;
    }
    
    .card {
        width: 100%;
        max-width: 250px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .card-img-top {
        width: 100%;
        height: auto;
        object-fit: cover;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .card-title {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .card-subtitle {
        font-size: 0.9rem;
        color: #666;
    }
    
    .card-text {
        font-size: 0.9rem;
        margin-bottom: 0.25rem;
    }
    
    /* Pagination Styles */
    .pagination-nav {
        margin-top: 2rem;
    }
    
    .pagination {
        margin: 0;
    }
    
    .page-link {
        color: #007bff;
        border: 1px solid #dee2e6;
        padding: 0.5rem 0.75rem;
        text-decoration: none;
        background-color: #fff;
        border-radius: 0;
    }
    
    .page-link:hover {
        color: #0056b3;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }
    
    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: #fff;
    }
    
    .page-item.disabled .page-link {
        color: #6c757d;
        background-color: #fff;
        border-color: #dee2e6;
        cursor: not-allowed;
    }
    
    .page-item:first-child .page-link {
        border-top-left-radius: 0.25rem;
        border-bottom-left-radius: 0.25rem;
    }
    
    .page-item:last-child .page-link {
        border-top-right-radius: 0.25rem;
        border-bottom-right-radius: 0.25rem;
    }
    
    /* Responsive design */
    @@media (max-width: 1200px) {
        .cards-container {
            grid-template-columns: repeat(3, 1fr);
        }
    }
    
    @@media (max-width: 900px) {
        .cards-container {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @@media (max-width: 768px) {
        .main-container {
            grid-template-columns: 1fr;
        }
        
        .sidebar {
            grid-column: span 1;
            position: static;
        }
        
        .content {
            grid-column: span 1;
        }
        
        .cards-container {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        }
        
        .pagination {
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .page-item {
            margin: 2px;
        }
    }
</style>

@code {
    protected override void OnInitialized()
    {
        Logger.LogInformation("CardPage initialized");
    }
    
    private async Task SearchCards()
    {
        Logger.LogInformation("Search button clicked for: {SearchTerm}", ViewModel.SearchTerm);
        ViewModel.CurrentPage = 1; // Reset to first page on new search
        await ViewModel.LoadCardsAsync();
    }
}

@* @page "/card" *@
@* @using BlazorPokemonCardSetViewer.Pages.ViewModels *@
@* @inject CardPageViewModel ViewModel *@
@* @inject ILogger<CardPage> Logger *@
@* *@
@* <div class="main-container"> *@
@*     <div class="sidebar"> *@
@*         <label for="cardId" class="form-label">Card Name:</label> *@
@*         <div class="input-group"> *@
@*             <input id="cardId" class="form-control" @bind="@ViewModel.CardName" placeholder="Enter card name..."/> *@
@*             <button class="btn btn-primary" @onclick="LoadCard" disabled="@ViewModel.IsLoading"> *@
@*                 @if (ViewModel.IsLoading) *@
@*                 { *@
@*                     <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> *@
@*                     <span>Loading...</span> *@
@*                 } *@
@*                 else *@
@*                 { *@
@*                     <span>Search Cards</span> *@
@*                 } *@
@*             </button> *@
@*         </div> *@
@*         <small class="form-text text-muted">Try names like "Pikachu", "Charizard", "Blastoise", etc.</small> *@
@*     </div> *@
@*      *@
@*     <div class="content"> *@
@*         @if (ViewModel.ErrorMessage != null) *@
@*         { *@
@*             <div class="alert alert-danger"> *@
@*                 @ViewModel.ErrorMessage *@
@*             </div> *@
@*         } *@
@*          *@
@*         @if (ViewModel.Cards.Any()) *@
@*         { *@
@*             <div class="cards-container"> *@
@*                 @foreach (var card in ViewModel.Cards) *@
@*                 { *@
@*                     <div class="card-wrapper"> *@
@*                         <div class="card"> *@
@*                             @if (card.Images?.Small != null) *@
@*                             { *@
@*                                 <img src="@card.Images.Small" class="card-img-top" alt="@card.Name" loading="lazy"> *@
@*                             } *@
@*                             <div class="card-body"> *@
@*                                 <h5 class="card-title">@card.Name</h5> *@
@*                                 <h6 class="card-subtitle mb-2 text-muted">ID: @card.Id</h6> *@
@*                                 @if (!string.IsNullOrEmpty(card.Hp) && card.Hp != "N/A") *@
@*                                 { *@
@*                                     <h6 class="card-text">HP: @card.Hp</h6> *@
@*                                 } *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*             </div> *@
@*         } *@
@*         else if (!ViewModel.IsLoading) *@
@*         { *@
@*             <div class="alert alert-info"> *@
@*                 <i class="fas fa-search"></i> Enter a card name to search for Pokemon cards. *@
@*             </div> *@
@*         } *@
@*     </div> *@
@* </div> *@
@* *@
@* <style> *@
@*     .main-container { *@
@*         display: grid; *@
@*         gap: 2rem; *@
@*         grid-template-columns: repeat(12, 1fr); *@
@*         margin: 1rem auto 10rem; *@
@*         align-items: start; *@
@*     } *@
@*      *@
@*     .sidebar { *@
@*         grid-column: span 3; *@
@*         position: sticky; *@
@*         top: 1rem; *@
@*     } *@
@*      *@
@*     .content { *@
@*         order: 1; *@
@*         grid-column: span 9; *@
@*         box-sizing: border-box; *@
@*     } *@
@*      *@
@*     .cards-container { *@
@*         display: grid; *@
@*         grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); *@
@*         gap: 1.5rem; *@
@*         margin-top: 1rem; *@
@*     } *@
@*      *@
@*     .card-wrapper { *@
@*         display: flex; *@
@*         justify-content: center; *@
@*     } *@
@*      *@
@*     .card { *@
@*         width: 100%; *@
@*         max-width: 250px; *@
@*         border: 1px solid #ddd; *@
@*         border-radius: 8px; *@
@*         overflow: hidden; *@
@*         box-shadow: 0 2px 4px rgba(0,0,0,0.1); *@
@*         transition: transform 0.2s, box-shadow 0.2s; *@
@*     } *@
@*      *@
@*     .card:hover { *@
@*         transform: translateY(-5px); *@
@*         box-shadow: 0 4px 8px rgba(0,0,0,0.2); *@
@*     } *@
@*      *@
@*     .card-img-top { *@
@*         width: 100%; *@
@*         height: auto; *@
@*         object-fit: cover; *@
@*     } *@
@*      *@
@*     .card-body { *@
@*         padding: 1rem; *@
@*     } *@
@*      *@
@*     .card-title { *@
@*         font-size: 1.1rem; *@
@*         font-weight: bold; *@
@*         margin-bottom: 0.5rem; *@
@*     } *@
@*      *@
@*     .card-subtitle { *@
@*         font-size: 0.9rem; *@
@*         color: #666; *@
@*     } *@
@*      *@
@*     .card-text { *@
@*         font-size: 0.9rem; *@
@*         margin-bottom: 0.25rem; *@
@*     } *@
@*      *@
@*     /* Responsive design */ *@
@*     @@media (max-width: 768px) { *@
@*         .main-container { *@
@*             grid-template-columns: 1fr; *@
@*         } *@
@*          *@
@*         .sidebar { *@
@*             grid-column: span 1; *@
@*             position: static; *@
@*         } *@
@*          *@
@*         .content { *@
@*             grid-column: span 1; *@
@*         } *@
@*          *@
@*         .cards-container { *@
@*             grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); *@
@*         } *@
@*     } *@
@* </style> *@
@* *@
@* @code { *@
@*     protected override void OnInitialized() *@
@*     { *@
@*         Logger.LogInformation("CardPage initialized"); *@
@*     } *@
@*      *@
@*     private async Task LoadCard() *@
@*     { *@
@*         Logger.LogInformation("Load button clicked for card: {CardId}", ViewModel.CardName); *@
@*         await ViewModel.LoadCardAsync(ViewModel.CardName); *@
@*     } *@
@* } *@